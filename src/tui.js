const blessed = require('blessed');
const chalk = require('chalk');
const Scanner = require('./scanner');
const Analyzer = require('./analyzer');
const IndexManager = require('./index-manager');
const logger = require('./logger');

/**
 * TUIÁïåÈù¢Á±ª
 */
class TUI {
  constructor(projectPath, options = {}) {
    this.projectPath = projectPath;
    this.verbose = options.verbose || false;
    this.endpoints = [];
    this.filteredEndpoints = [];
    this.selectedIndex = 0;
    this.searchQuery = '';
    this.moduleFilter = null;
    this.isSearchMode = false;
    this.isDetailMode = false;
    this.isModuleFilterMode = false;
    this.currentDetailIndex = 0;
    this.moduleInfo = null; // Êñ∞Â¢ûÔºöÊ®°Âùó‰ø°ÊÅØ
    
    this.setupScreen();
    this.setupComponents();
    this.bindEvents();
  }

  /**
   * ËÆæÁΩÆÂ±èÂπï
   */
  setupScreen() {
    this.screen = blessed.screen({
      smartCSR: true,
      title: 'JavaCLI - SpringÈ°πÁõÆÂàÜÊûêÂ∑•ÂÖ∑',
      fullUnicode: true,
      dockBorders: true,
      ignoreLocked: ['C-c'],
      autoPadding: true,
      warnings: false
    });
  }

  /**
   * ËÆæÁΩÆUIÁªÑ‰ª∂
   */
  setupComponents() {
    // Ê†áÈ¢òÊ†è
    this.titleBox = blessed.box({
      top: 0,
      left: 0,
      width: '100%',
      height: 3,
      content: '{center}{bold}JavaCLI - SpringÈ°πÁõÆÂàÜÊûêÂ∑•ÂÖ∑{/bold}{/center}',
      tags: true,
      border: {
        type: 'line'
      },
      style: {
        fg: 'white',
        bg: 'blue',
        border: {
          fg: 'cyan'
        }
      }
    });

    // ‰ø°ÊÅØÊ†è
    this.infoBox = blessed.box({
      top: 3,
      left: 0,
      width: '100%',
      height: 3,
      border: {
        type: 'line'
      },
      style: {
        border: {
          fg: 'cyan'
        }
      }
    });

    // endpointsÂàóË°®
    this.listBox = blessed.list({
      top: 6,
      left: 0,
      width: '100%',
      height: '100%-9',
      keys: true,
      vi: true,
      mouse: true,
      border: {
        type: 'line'
      },
      style: {
        border: {
          fg: 'cyan'
        },
        selected: {
          bg: 'blue'
        }
      },
      scrollbar: {
        ch: ' ',
        style: {
          bg: 'yellow'
        }
      },
      tags: true,
      parseTags: true
    });

    // Â∏ÆÂä©Ê†è
    this.helpBox = blessed.box({
      bottom: 0,
      left: 0,
      width: '100%',
      height: 3,
      content: '‚Üë/‚Üì: ÂØºËà™  Enter: ËØ¶ÊÉÖ  /: ÊêúÁ¥¢  m: Ê®°ÂùóËøáÊª§  c: Ê∏ÖÈô§  r: ÈáçÊñ∞Êâ´Êèè  h: Â∏ÆÂä©  q: ÈÄÄÂá∫',
      border: {
        type: 'line'
      },
      style: {
        fg: 'cyan',
        border: {
          fg: 'cyan'
        }
      },
      tags: true,
      parseTags: true
    });

    // ËØ¶ÊÉÖÁ™óÂè£
    this.detailBox = blessed.box({
      top: 'center',
      left: 'center',
      width: '80%',
      height: '80%',
      border: {
        type: 'line'
      },
      style: {
        border: {
          fg: 'yellow'
        }
      },
      hidden: true
    });

    // Ê∑ªÂä†ÁªÑ‰ª∂Âà∞Â±èÂπï
    this.screen.append(this.titleBox);
    this.screen.append(this.infoBox);
    this.screen.append(this.listBox);
    this.screen.append(this.helpBox);
    this.screen.append(this.detailBox);

    // ËÆæÁΩÆÁÑ¶ÁÇπ
    this.listBox.focus();
  }

  /**
   * ÁªëÂÆö‰∫ã‰ª∂
   */
  bindEvents() {
    // ÈÄÄÂá∫‰∫ã‰ª∂
    this.screen.key(['escape', 'q', 'C-c'], () => {
      if (this.isDetailMode) {
        this.hideDetail();
      } else {
        process.exit(0);
      }
    });

    // ÊêúÁ¥¢‰∫ã‰ª∂
    this.screen.key('/', () => {
      if (!this.isDetailMode) {
        this.startSearch();
      }
    });

    // Ê®°ÂùóËøáÊª§
    this.screen.key('m', () => {
      if (!this.isDetailMode) {
        this.startModuleFilter();
      }
    });

    // Ê∏ÖÈô§Ê®°ÂùóËøáÊª§
    this.screen.key('c', () => {
      if (!this.isDetailMode) {
        this.clearModuleFilter();
      }
    });

    // ÈáçÊñ∞Êâ´Êèè
    this.screen.key('r', async () => {
      if (!this.isDetailMode) {
        await this.rescan();
      }
    });

    // Â∏ÆÂä©‰ø°ÊÅØ
    this.screen.key('h', () => {
      if (!this.isDetailMode) {
        this.showHelp();
      }
    });

    // EnterÈîÆÊü•ÁúãËØ¶ÊÉÖ
    this.screen.key('enter', () => {
      if (!this.isDetailMode && this.filteredEndpoints.length > 0) {
        this.showDetail();
      } else if (this.isDetailMode) {
        this.hideDetail();
      }
    });

    // Á©∫Ê†ºÈîÆÊü•ÁúãËØ¶ÊÉÖ
    this.screen.key('space', () => {
      if (!this.isDetailMode && this.filteredEndpoints.length > 0) {
        this.showDetail();
      }
    });

    // ÂàóË°®ÈÄâÊã©‰∫ã‰ª∂
    this.listBox.on('select', (item, index) => {
      this.selectedIndex = index;
    });
  }

  /**
   * ÂêØÂä®TUI
   */
  async start() {
    try {
      this.updateInfo('Ê≠£Âú®Âä†ËΩΩÈ°πÁõÆ‰ø°ÊÅØ...');
      this.screen.render();

      await this.loadEndpoints();
      this.updateList();
      this.screen.render();
    } catch (error) {
      logger.error(`TUIÂêØÂä®Â§±Ë¥•: ${error.message}`, error);
      this.showError(`ÂêØÂä®Â§±Ë¥•: ${error.message}`);
    }
  }

  /**
   * Âä†ËΩΩendpoints
   */
  async loadEndpoints() {
    try {
      // Ê£ÄÊü•ÊòØÂê¶ÂåÖÂê´JavaÊñá‰ª∂ÔºåÊîØÊåÅ‰ªª‰ΩïJavaÈ°πÁõÆ
      const scanResult = await Scanner.scanJavaFiles(this.projectPath);
      const { javaFiles, moduleInfo } = scanResult;
      if (javaFiles.length === 0) {
        throw new Error('ÂΩìÂâçÁõÆÂΩïÊú™ÊâæÂà∞JavaÊñá‰ª∂');
      }

      // Â∞ùËØïÂä†ËΩΩÁºìÂ≠ò
      const metadata = await IndexManager.loadIndexMetadata(this.projectPath);
      if (metadata) {
        const isValid = await IndexManager.isIndexValid(this.projectPath, metadata);
        if (isValid) {
          this.endpoints = await this.loadFromCache();
          this.updateInfo(`Â∑≤Âä†ËΩΩÁºìÂ≠ò (${this.endpoints.length}‰∏™endpoints)`);
          return;
        }
      }

      // Êâ´ÊèèÂíåÂàÜÊûêÈ°πÁõÆ
      this.updateInfo('Ê≠£Âú®Êâ´ÊèèJavaÊñá‰ª∂...');
      const startTime = Date.now();
      
      const allJavaFiles = javaFiles;
      
      if (moduleInfo.isMultiModule) {
        const springModuleCount = moduleInfo.modules.filter(m => m.hasSpringBoot).length;
        this.updateInfo(`Êâ´ÊèèÂÆåÊàêÔºåÂèëÁé∞ ${moduleInfo.modules.length} ‰∏™Ê®°ÂùóÔºà${springModuleCount} ‰∏™ÂåÖÂê´SpringÔºâÔºåÊ≠£Âú®ÂàÜÊûê ${allJavaFiles.length} ‰∏™JavaÊñá‰ª∂...`);
      } else {
        this.updateInfo(`Êâ´ÊèèÂÆåÊàêÔºåÊ≠£Âú®ÂàÜÊûê ${allJavaFiles.length} ‰∏™JavaÊñá‰ª∂...`);
      }
      
      const { endpoints, controllerCount } = await Analyzer.analyzeEndpoints(this.projectPath, moduleInfo);
      const duration = Date.now() - startTime;
      
      // ‰øùÂ≠òÊ®°Âùó‰ø°ÊÅØ‰æõÁïåÈù¢‰ΩøÁî®
      this.moduleInfo = moduleInfo;
      
      // ÁîüÊàêÁªüËÆ°‰ø°ÊÅØÂπ∂‰øùÂ≠òÁ¥¢Âºï
      const stats = {
        totalEndpoints: endpoints.length,
        methodCounts: this.calculateMethodCounts(endpoints),
        totalJavaFiles: allJavaFiles.length,
        controllerFiles: controllerCount,
        scanDurationMs: duration
      };
      
      await IndexManager.saveIndex(this.projectPath, endpoints, stats);
      
      this.endpoints = endpoints;
      this.updateInfo(`ÂàÜÊûêÂÆåÊàêÔºåÊâæÂà∞ ${endpoints.length} ‰∏™endpoints`);
    } catch (error) {
      logger.error(`Âä†ËΩΩendpointsÂ§±Ë¥•: ${error.message}`, error);
      throw new Error(`Âä†ËΩΩendpointsÂ§±Ë¥•: ${error.message}`);
    }
  }

  /**
   * ‰ªéÁºìÂ≠òÂä†ËΩΩendpoints
   */
  async loadFromCache() {
    try {
      return await IndexManager.loadIndex(this.projectPath);
    } catch (error) {
      logger.warn(`‰ªéÁºìÂ≠òÂä†ËΩΩÂ§±Ë¥•: ${error.message}`, error);
      return [];
    }
  }

  /**
   * ËÆ°ÁÆóÊñπÊ≥ïÁªüËÆ°
   */
  calculateMethodCounts(endpoints) {
    const counts = {};
    for (const ep of endpoints) {
      counts[ep.method] = (counts[ep.method] || 0) + 1;
    }
    return counts;
  }

  /**
   * Êõ¥Êñ∞‰ø°ÊÅØÊ†è
   */
  updateInfo(message) {
    let content = `üìÅ È°πÁõÆË∑ØÂæÑ: ${this.projectPath}\n`;
    
    if (this.endpoints.length > 0) {
      content += `üåê ÊâæÂà∞ ${this.endpoints.length} ‰∏™HTTP endpoints`;
      
      // Â¶ÇÊûúÊòØÂ§öÊ®°ÂùóÈ°πÁõÆÔºåÊòæÁ§∫Ê®°ÂùóÁªüËÆ°
      if (this.moduleInfo && this.moduleInfo.isMultiModule) {
        const springModules = this.moduleInfo.modules.filter(m => m.hasSpringBoot);
        content += ` (${springModules.length} ‰∏™Ê®°Âùó)`;
      }
      
      const filters = [];
      if (this.searchQuery) {
        filters.push(`ÊêúÁ¥¢: ${this.searchQuery}`);
      }
      if (this.moduleFilter) {
        filters.push(`Ê®°Âùó: ${this.moduleFilter}`);
      }
      
      if (filters.length > 0) {
        content += ` (${filters.join(', ')})`;
      }
    } else {
      content += message;
    }
    
    this.infoBox.setContent(content);
  }

  /**
   * Êõ¥Êñ∞ÂàóË°®
   */
  updateList() {
    this.filteredEndpoints = this.endpoints.filter(ep => {
      let matchSearch = true;
      let matchModule = true;
      
      if (this.searchQuery) {
        matchSearch = this.filterEndpoints([ep], this.searchQuery).length > 0;
      }
      
      if (this.moduleFilter) {
        matchModule = ep.moduleName === this.moduleFilter;
      }
      
      return matchSearch && matchModule;
    });

    const items = this.filteredEndpoints.map(ep => {
      const methodColor = this.getMethodColor(ep.method);
      let moduleDisplay = '';
      
      // ÊòæÁ§∫Ê®°Âùó‰ø°ÊÅØÔºàÂåÖÊã¨ÂçïÊ®°ÂùóÈ°πÁõÆÔºâ
      if (ep.moduleName) {
        const moduleName = ep.moduleName.length > 12 ? ep.moduleName.substr(0, 12) + '...' : ep.moduleName;
        moduleDisplay = `[${moduleName}] `;
      }
      
      return `${methodColor}${ep.method.padEnd(6)} ${ep.path.padEnd(35)} ${moduleDisplay}${ep.className.padEnd(18)} ${ep.methodName}`;
    });

    this.listBox.setItems(items);
    this.updateInfo('');
  }

  /**
   * Ëé∑ÂèñHTTPÊñπÊ≥ïÈ¢úËâ≤
   */
  getMethodColor(method) {
    const colors = {
      'GET': '{green-fg}',
      'POST': '{blue-fg}',
      'PUT': '{yellow-fg}',
      'DELETE': '{red-fg}',
      'PATCH': '{magenta-fg}'
    };
    return colors[method] || '{white-fg}';
  }

  /**
   * ËøáÊª§endpoints
   */
  filterEndpoints(endpoints, query) {
    const lowerQuery = query.toLowerCase();
    return endpoints.filter(ep => 
      ep.method.toLowerCase().includes(lowerQuery) ||
      ep.path.toLowerCase().includes(lowerQuery) ||
      ep.className.toLowerCase().includes(lowerQuery) ||
      ep.methodName.toLowerCase().includes(lowerQuery) ||
      (ep.moduleName && ep.moduleName.toLowerCase().includes(lowerQuery))
    );
  }

  /**
   * ÂºÄÂßãÊêúÁ¥¢
   */
  startSearch() {
    this.isSearchMode = true;
    
    const searchBox = blessed.textbox({
      top: 'center',
      left: 'center',
      width: 50,
      height: 3,
      border: {
        type: 'line'
      },
      style: {
        border: {
          fg: 'yellow'
        }
      },
      inputOnFocus: true
    });

    searchBox.setContent('ÊêúÁ¥¢: ');
    this.screen.append(searchBox);
    searchBox.focus();

    searchBox.on('submit', (value) => {
      this.searchQuery = value || '';
      this.updateList();
      this.screen.remove(searchBox);
      this.listBox.focus();
      this.isSearchMode = false;
      this.screen.render();
    });

    searchBox.on('cancel', () => {
      this.screen.remove(searchBox);
      this.listBox.focus();
      this.isSearchMode = false;
      this.screen.render();
    });

    this.screen.render();
  }

  /**
   * ÊòæÁ§∫ËØ¶ÊÉÖ
   */
  showDetail() {
    if (this.filteredEndpoints.length === 0) return;

    this.isDetailMode = true;
    this.currentDetailIndex = this.listBox.selected;
    const endpoint = this.filteredEndpoints[this.currentDetailIndex];

    let content = `EndpointËØ¶ÊÉÖ (${this.currentDetailIndex + 1}/${this.filteredEndpoints.length})

üåê HTTPÊñπÊ≥ï: ${endpoint.method}
üìç Ë∑ØÂæÑ: ${endpoint.path}`;

    // ÊòæÁ§∫Ê®°Âùó‰ø°ÊÅØ
    if (endpoint.moduleName) {
      content += `\nüì¶ Ê®°Âùó: ${endpoint.moduleName}`;
    }

    content += `
üè∑Ô∏è  ÊéßÂà∂Âô®Á±ª: ${endpoint.className}
‚öôÔ∏è  JavaÊñπÊ≥ï: ${endpoint.methodName}()
üìÑ Êñá‰ª∂: ${endpoint.filePath}
üìã Ë°åÂè∑: ${endpoint.lineNumber}
üîß ÂèÇÊï∞: ${endpoint.parameters.join(', ') || 'Êó†'}

‚Üë/‚Üì: ÂàáÊç¢endpoint  Esc/Enter: ËøîÂõûÂàóË°®  Q: ÈÄÄÂá∫`;

    this.detailBox.setContent(content);
    this.detailBox.show();
    this.detailBox.focus();
    this.screen.render();
  }

  /**
   * ÈöêËóèËØ¶ÊÉÖ
   */
  hideDetail() {
    this.isDetailMode = false;
    this.detailBox.hide();
    this.listBox.focus();
    this.screen.render();
  }

  /**
   * ÂºÄÂßãÊ®°ÂùóËøáÊª§
   */
  startModuleFilter() {
    // Ëé∑ÂèñÊâÄÊúâÂîØ‰∏ÄÁöÑÊ®°ÂùóÂêçÁß∞
    const modules = [...new Set(this.endpoints.filter(ep => ep.moduleName).map(ep => ep.moduleName))].sort();
    
    if (modules.length === 0) {
      this.updateInfo('ÂΩìÂâçÈ°πÁõÆÊ≤°ÊúâÊ®°Âùó‰ø°ÊÅØ');
      return;
    }

    const moduleBox = blessed.list({
      top: 'center',
      left: 'center',
      width: '40%',
      height: Math.min(modules.length + 4, 15),
      label: 'ÈÄâÊã©Ê®°Âùó (ÊåâEnterÁ°ÆËÆ§ÔºåEscÂèñÊ∂à)',
      border: {
        type: 'line'
      },
      style: {
        border: {
          fg: 'cyan'
        },
        selected: {
          bg: 'blue'
        }
      },
      items: ['ÂÖ®ÈÉ®Ê®°Âùó', ...modules],
      keys: true,
      vi: true
    });

    this.screen.append(moduleBox);
    this.screen.render();

    moduleBox.focus();

    moduleBox.key(['escape'], () => {
      this.screen.remove(moduleBox);
      this.screen.render();
      this.listBox.focus();
    });

    moduleBox.key(['enter'], () => {
      const selectedIndex = moduleBox.selected;
      if (selectedIndex === 0) {
        this.clearModuleFilter();
      } else {
        this.moduleFilter = modules[selectedIndex - 1];
      }
      
      this.screen.remove(moduleBox);
      this.listBox.focus();
      this.updateList();
    });
  }

  /**
   * Ê∏ÖÈô§Ê®°ÂùóËøáÊª§
   */
  clearModuleFilter() {
    this.moduleFilter = null;
    this.updateList();
  }

  /**
   * ÈáçÊñ∞Êâ´Êèè
   */
  async rescan() {
    try {
      this.updateInfo('Ê≠£Âú®ÈáçÊñ∞Êâ´ÊèèÈ°πÁõÆ...');
      this.screen.render();

      await IndexManager.clearIndex(this.projectPath);
      await this.loadEndpoints();
      this.updateList();
      this.screen.render();
    } catch (error) {
      this.showError(`ÈáçÊñ∞Êâ´ÊèèÂ§±Ë¥•: ${error.message}`);
    }
  }

  /**
   * ÊòæÁ§∫ÈîôËØØ
   */
  showError(message) {
    const errorBox = blessed.message({
      top: 'center',
      left: 'center',
      width: 60,
      height: 8,
      border: {
        type: 'line'
      },
      style: {
        border: {
          fg: 'red'
        }
      }
    });

    errorBox.error(message, () => {
      this.screen.remove(errorBox);
      this.screen.render();
    });

    this.screen.append(errorBox);
    this.screen.render();
  }
}

module.exports = TUI;